#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'overnight/nightscout'
require 'overnight/pushover'
require 'rufus-scheduler'

module Overnight
  # controls periodic sampling of Nightscout data and output to the terminal
  class Console
    def initialize(silent: false)
      @nightscout = Nightscout.new
      @scheduler = Rufus::Scheduler.new
      @silent = silent
    end

    def sample_every(interval)
      Nightscout::Sample.print_column_headers unless @silent
      @scheduler.every(interval, first: :now) do |job|
        sample = fetch_sample
        sample.print_row unless @silent
        report_problems(sample)
        job.next_time = sample.next_time if sample.mistimed?
      rescue Overnight::Error => e
        warn e.message
      end
    end

    def start_sampling
      @scheduler.join
    end

    def stop_sampling
      @scheduler.shutdown(:wait)
      @nightscout.abort
    end

    private

    def fetch_sample
      time = Time.now
      keys = %i[entry device_status status treatment]
      values = @nightscout.get.fetch_values(*keys)
      Nightscout::Sample.new(time, *values)
    end

    def report_problems(sample)
      if sample.missed_samples.zero?
        warn_listeners(sample.problems)
      # Dexcom warns every 30 minutes, so warn after 15 and every 30 after that
      elsif ((sample.missed_samples + 3) % 6).zero?
        warn_listeners("No data for the last #{sample.delay / 60} minutes")
      end
    end

    def warn_listeners(problems)
      return if problems.empty?

      problems.each { puts "Warning: #{it}" } # ignore silent mode for warnings
      message = problems.map { Nightscout::Printer.format_plain(it) }.join("\n")
      Pushover.post(message, title: 'Warning')
    end
  end
end

# handle interrupts as the normal way to terminate the process
Signal.trap('INT') do
  puts "\rInterrupted"
  exit
end

console = Overnight::Console.new(**Overnight::Options.parse)
puts "Monitoring #{Overnight::Nightscout::HOST}..."
at_exit { console.stop_sampling }
console.sample_every('5m')
console.start_sampling
