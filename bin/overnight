#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'fugit'
require 'overnight/nightscout'
require 'rufus-scheduler'

module Overnight
  # controls periodic sampling of Nightscout data and output to the terminal
  class Console
    def initialize
      @nightscout = Nightscout.new
      @scheduler = Rufus::Scheduler.new
    end

    def sample_every(interval)
      Nightscout::Sample.print_column_headers
      delay = Fugit::Duration.parse(interval).to_sec + 5
      @scheduler.every(interval, first: :now) do |job|
        sample_time, entry_time = print_glucose_values
        job.next_time = entry_time + delay if sample_time - entry_time < delay
      rescue Overnight::Nightscout::Error => e
        warn e.message
      end
    end

    def start_sampling
      @scheduler.join
    end

    def stop_sampling
      @scheduler.shutdown(:wait)
      @nightscout.abort
    end

    private

    def print_glucose_values
      time = Time.now
      values = @nightscout.get.fetch_values(:entry, :device_status, :status)
      Nightscout::Sample.new(time, *values).print_row
      [time, values.first.first.time]
    end
  end
end

# handle interrupts as the normal way to terminate the process
Signal.trap('INT') do
  puts
  exit
end

console = Overnight::Console.new
at_exit { console.stop_sampling }
console.sample_every('5m')
console.start_sampling
